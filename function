>>> def do_nothing():
n 3.7.2 (default, Nov  2 2020, 21:05:46)
[GCC 8.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> def do_nothing():
...     pass
...
>>> do_nothing()
>>>
>>> def make_a_sound():
...     print('quack')
...
>>> make_a_sound()
quack
>>> def agree():
...     return True
...
>>> agree()
True
>>> if agree():
...     print('Splendid!')
... else:
...     print('That was unexpected.')
...
Splendid!
>>> def echo(anything):
...     return anything + ' ' + anything
...
>>> echo('Rumplestiltskin')
'Rumplestiltskin Rumplestiltskin'
>>> def commentary(color):
...     if color == 'red':
...             return "It's a tomato."
...     elif color == 'green':
...             return "It's a green pepper."
...     elif color == 'bee purple':
...             return "I don't know what it is, but only bess can see it."
...     else:
...             return "I've never heard of the color " + color + "."
...
>>> comment = commentary('blue')
>>> print(comment)
I've never heard of the color blue.
>>> print(do_nothing())
None
>>> def menu(wine, entree, dessert):
...     return {'wine': wine, 'entree': entree, 'dessert': dessert}
...
>>> menu('chardonnay', 'chicken', 'cake')
{'wine': 'chardonnay', 'entree': 'chicken', 'dessert': 'cake'}
>>> menu(entree='beef', dessert='bagel', wine='bordeaux')
{'wine': 'bordeaux', 'entree': 'beef', 'dessert': 'bagel'}
>>> def menu(wine, entree, dessert="pudding"):
...     return {'wine': wine, 'entree': entree, 'dessert': dessert}
...
>>> menu('chardonnay', 'chicken')
{'wine': 'chardonnay', 'entree': 'chicken', 'dessert': 'pudding'}
>>> menu('chardonnay', 'chicken', 'doughnut')
{'wine': 'chardonnay', 'entree': 'chicken', 'dessert': 'doughnut'}
>>> def buggy(arg, result=[]):
...     result.append(arg)
...     print(result)
...
>>> buggy('a')
['a']
>>> buggy('b')
['a', 'b']
>>> def works(arg):
...     result = []
...     result.append(arg)
...     return result
...
>>> works('a')
['a']
>>> works('b')
['b']
>>> def print_args(*args):
...     print('Positional argument tuple:', args)
...
>>> print_args()
Positional argument tuple: ()
>>> print_args(3,2,1, 'wait!', 'uh...')
Positional argument tuple: (3, 2, 1, 'wait!', 'uh...')
>>> def print_more(required1, required2, *args):
...     print('Need this one:', required1)
...     print('Need this one too:', required2)
...     print('All the rest:', args)
...
>>>
>>> print_more('cap', 'gloves', 'scarf', 'monocle', 'mustache wax')
Need this one: cap
Need this one too: gloves
All the rest: ('scarf', 'monocle', 'mustache wax')
>>> def print_kwargs(**kwargs):
...     print('Keyword arguments:', kwargs)
...
>>> print_kwargs(wine='merlot', entree='mutton', dessert='macaroon')
Keyword arguments: {'wine': 'merlot', 'entree': 'mutton', 'dessert': 'macaroon'}
>>> def echo(anything):
...     'echoは、与えられた入力引数を返す'
...     return anything
...
>>> echo('いもとくん Pythonへようこそ')
'いもとくん Pythonへようこそ'

>>> def print_if_true(thing, check):
...     '''
...     第2引数が真なら、第1引数を表示する
...     処理内容:
...             1. *第2*引数が真かどうかをチェックする。
...             2. 真なら*第1*引数を表示する。
...     '''
...     if check:
...             print(thing)
...
>>> print_if_true('私は本気でPython を学びます', True)
私は本気でPython を学びます
>>> print_if_true('私は本気でPython を学びます', False)
>>> help(print_if_true)
Help on function print_if_true in module __main__:

print_if_true(thing, check)
    第2引数が真なら、第1引数を表示する
    処理内容:
            1. *第2*引数が真かどうかをチェックする。
            2. 真なら*第1*引数を表示する。
>>> print(print_if_true.__doc__)

        第2引数が真なら、第1引数を表示する
        処理内容:
                1. *第2*引数が真かどうかをチェックする。
                2. 真なら*第1*引数を表示する。

>>> def answer():
...     print(42)
...
>>> answer()
42
>>> def run_something(func):
...     func()
...
>>> run_something(answer)
42
>>> type(run_something)
<class 'function'>
>>> def run_something_with_args(func, arg1, arg2):
...     func(arg1, arg2)
...
>>> run_something_with_args(add_args, 5, 9)
14
>>> def sum_args(*args):
...     return sum(args)
...
>>> def run_with_positional_args(func, *args):
...     return func(*args)
...
>>> run_with_positional_args(sum_args, 1, 2, 3, 4)
10
>>> def outer(a, b):
...     def inner(c, d):
...             return c + d
...     return inner(a, b)
...
>>> outer(4, 7)
11
>>> def knights(saying):
...     def inner(quote):
...             return "We are the knights who say: '%s'" % quote
...     return inner(saying)
...
>>> knights('Ni!')
"We are the knights who say: 'Ni!'"
>>> def knights2(saying):
...     def inner2():
...             return "We are the knights who say: '%s" % saying
...     return inner2
...
>>> a = knights2('Duck')
>>> b = knights2('Hasenpfeffer')
>>> a()
"We are the knights who say: 'Duck"
>>> b()
"We are the knights who say: 'Hasenpfeffer"
>>> def edit_story(words, func):
...     for word in words:
...             print(func(word))
...
>>> stairs = ['thud', 'meow', 'thud', 'hiss']
>>> def enliven(word):
...     return word.capitalize() + '!'
...
>>> edit_story(stairs, enliven)
Thud!
Meow!
Thud!
Hiss!
>>> edit_story(stairs, lambda word: word.capitalize() + '!')
Thud!
Meow!
Thud!
Hiss!

