n1nj4h@n1nj4h:~$ python
Python 3.7.2 (default, Nov  2 2020, 21:05:46)
[GCC 8.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> class Car():
...     pass
...
>>> class Yugo(Car):
...     pass
...
>>> give_me_a_car  = Car()
>>> give_me_a_yugo = Yugo()
>>> class Car:
...     def exclaim(self):
...             print("I'm a Car!")
...
>>> class Yugo(Car):
...     pass
...
>>> give_me_a_car = Car()
>>> give_me_a_yugo = Yugo()
>>> give_me_a_car.exclaim()
I'm a Car!
>>> give_me_a_yugo.exclaim()
I'm a Car!
>>> class Yugo(Car):
...     def exclaim(self):
...             print("I'm a Yugo! Much like a Car, but more Yugo-ish.")
...
>>> give_me_a_car = Car()
>>> give_me_a_yugo = Yugo()
>>> give_me_a_car.exclaim()
I'm a Car!
>>> give_me_a_yugo.exclaim()
I'm a Yugo! Much like a Car, but more Yugo-ish.
>>>
>>> class Person():
...     def __init__(self, name):
...             self.name = name
...
>>> class MDPerson(Person):
...     def __init__(self, name):
...             self.name = "Doctor " + name
...
>>> class JDPerson(Person):
...     def __init__(self, name):
...             self.name = name + ", Esquire"
...
>>> person = Person('Fudd')
>>> doctor = MDPerson('Fudd')
>>> lawyer = JDPerson('Fudd')
>>> print(person.name)
Fudd
>>> print(doctor.name)
Doctor Fudd
>>> print(lawyer.name)
Fudd, Esquire
>>> class Car():
...     def exclaim(self):
...             print("I'm a Car!")
...
>>> class Yugo(Car):
...     def exclaim(self):
...             print("I'm a Yugo! Much like a Car, but more Yugo-ish.")
...     def need_a_push(self):
...             print("A little help here?")
...
>>> give_me_a_car = Car()
>>> give_me_a_yugo = Yugo()
>>> give_me_a_yugo.need_a_push()
A little help here?
>>> gibe_me_a_car.need_a_push()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'gibe_me_a_car' is not defined
>>> class Person():
...     def __init__(self, name):
...             self.name = name
...
>>> class EmailPerson(Person):
...     def __init__(self, name, email):
...             super().__init__(name)
...             self.email = email
...
>>> bob = EmailPerson('Bob Frapples', 'bob@frapples.com')
>>> bob.name
'Bob Frapples'
>>> bob.email
'bob@frapples.com'
>>> class Duck():
...     def __init__(self, input_name):
...             self.hidden_name = input_name
...     def get_name(self):
...             print('inside the getter')
...             return self.hidden_name
...     def set_name(self, input_name):
...             print('inside the setter')
...             self.hidden_name = input_name
...     name = property(get_name, set_name)
...
>>> fowl = Duck('Howard')
>>> fowl.name
inside the getter
'Howard'
>>> fowl.get_name()
inside the getter
'Howard'
>>> fowl.name = 'Daffy'
inside the setter
>>> fowl.name
inside the getter
'Daffy'
>>> fowl.set_name('Daffy')
inside the setter
>>> fowl.name
inside the getter
'Daffy'
>>> class Duck():
...     def __init__(self, input_name):
...             self.hidden_name = input_name
...     @property
...     def name(self):
...             print('inside the getter')
...             return self.hidden_name
...     @name.setter
...     def name(self, input_name):
...             print('inside the setter')
...             self.hidden_name = input_name
...
>>> fowl = Duck('Howard')
>>> fowl.name
inside the getter
'Howard'
>>> fowl.name = 'Donald'
inside the setter
>>> fowl.name
inside the getter
'Donald'
>>> class Duck():
...     def __init__(self, input_name):
...             self.__name = input_name
...     @property
...     def name(self):
...             print('inside the getter')
...             return self.__name
...     @name.setter
...     def name(self, input_name):
...             print('inside the setter')
...             self.__name = input_name
...
>>> fowl = Duck('Howard')
>>> fowl.name
inside the getter
'Howard'
>>> fowl.name = 'Donald'
inside the setter
>>> fowl.name
inside the getter
'Donald'
>>> fowl.__name
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'Duck' object has no attribute '__name'
>>> fowl._Duck__name
'Donald'
>>> class A():
...     count = 0
...     def __init__(self):
...             A.count += 1
...     def exclaim(self):
...             print("I'm an A!")
...     @classmethod
...     def kids(cls):
...             print("A has", cls.count, "little objects.")
...
>>> easy_a = A()
>>> breezy_a = A()
>>> wheez_a = A()
>>> A.kids()
A has 3 little objects.
>>> class CoyoteWeapon():
...     @staticmethod
...     def commercial():
...             print('This CoyoteWeapon has been brought to you by Acme')
...
>>> CoyoteWeapon.commercial()
This CoyoteWeapon has been brought to you by Acme

